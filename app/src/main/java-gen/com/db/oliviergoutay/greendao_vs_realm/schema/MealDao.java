package com.db.oliviergoutay.greendao_vs_realm.schema;

import java.util.List;
import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.db.oliviergoutay.greendao_vs_realm.schema.Meal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEAL".
*/
public class MealDao extends AbstractDao<Meal, Long> {

    public static final String TABLENAME = "MEAL";

    /**
     * Properties of entity Meal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Size = new Property(1, String.class, "size", false, "SIZE");
        public final static Property MealType = new Property(2, String.class, "mealType", false, "MEAL_TYPE");
        public final static Property UpdatedAt = new Property(3, Long.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Healthiness = new Property(4, Integer.class, "healthiness", false, "HEALTHINESS");
        public final static Property PhotoUrl = new Property(5, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property EatenOn = new Property(6, long.class, "eatenOn", false, "EATEN_ON");
        public final static Property PhotoId = new Property(7, Long.class, "photoId", false, "PHOTO_ID");
    };

    private DaoSession daoSession;

    private Query<Meal> dailyMeal_MealsQuery;

    public MealDao(DaoConfig config) {
        super(config);
    }
    
    public MealDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SIZE\" TEXT," + // 1: size
                "\"MEAL_TYPE\" TEXT," + // 2: mealType
                "\"UPDATED_AT\" INTEGER," + // 3: updatedAt
                "\"HEALTHINESS\" INTEGER," + // 4: healthiness
                "\"PHOTO_URL\" TEXT," + // 5: photoUrl
                "\"EATEN_ON\" INTEGER NOT NULL ," + // 6: eatenOn
                "\"PHOTO_ID\" INTEGER);"); // 7: photoId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MEAL_EATEN_ON ON MEAL" +
                " (\"EATEN_ON\");");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MEAL_MEAL_TYPE_EATEN_ON ON MEAL" +
                " (\"MEAL_TYPE\",\"EATEN_ON\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Meal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(2, size);
        }
 
        String mealType = entity.getMealType();
        if (mealType != null) {
            stmt.bindString(3, mealType);
        }
 
        Long updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(4, updatedAt);
        }
 
        Integer healthiness = entity.getHealthiness();
        if (healthiness != null) {
            stmt.bindLong(5, healthiness);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(6, photoUrl);
        }
        stmt.bindLong(7, entity.getEatenOn());
 
        Long photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindLong(8, photoId);
        }
    }

    @Override
    protected void attachEntity(Meal entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Meal readEntity(Cursor cursor, int offset) {
        Meal entity = new Meal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // size
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mealType
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // updatedAt
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // healthiness
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photoUrl
            cursor.getLong(offset + 6), // eatenOn
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // photoId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Meal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSize(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMealType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdatedAt(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setHealthiness(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPhotoUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEatenOn(cursor.getLong(offset + 6));
        entity.setPhotoId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Meal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Meal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "meals" to-many relationship of DailyMeal. */
    public List<Meal> _queryDailyMeal_Meals(long eatenOn) {
        synchronized (this) {
            if (dailyMeal_MealsQuery == null) {
                QueryBuilder<Meal> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EatenOn.eq(null));
                queryBuilder.orderRaw("T.'_id' DESC");
                dailyMeal_MealsQuery = queryBuilder.build();
            }
        }
        Query<Meal> query = dailyMeal_MealsQuery.forCurrentThread();
        query.setParameter(0, eatenOn);
        return query.list();
    }

}
