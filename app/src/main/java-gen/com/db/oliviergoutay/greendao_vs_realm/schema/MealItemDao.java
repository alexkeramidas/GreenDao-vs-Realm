package com.db.oliviergoutay.greendao_vs_realm.schema;

import java.util.List;
import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.db.oliviergoutay.greendao_vs_realm.schema.MealItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEAL_ITEM".
*/
public class MealItemDao extends AbstractDao<MealItem, Long> {

    public static final String TABLENAME = "MEAL_ITEM";

    /**
     * Properties of entity MealItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item = new Property(1, String.class, "item", false, "ITEM");
        public final static Property MealId = new Property(2, long.class, "mealId", false, "MEAL_ID");
    };

    private Query<MealItem> meal_ItemsQuery;

    public MealItemDao(DaoConfig config) {
        super(config);
    }
    
    public MealItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEAL_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM\" TEXT NOT NULL ," + // 1: item
                "\"MEAL_ID\" INTEGER NOT NULL );"); // 2: mealId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MEAL_ITEM_ITEM_MEAL_ID ON MEAL_ITEM" +
                " (\"ITEM\",\"MEAL_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEAL_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, MealItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getItem());
        stmt.bindLong(3, entity.getMealId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MealItem readEntity(Cursor cursor, int offset) {
        MealItem entity = new MealItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // item
            cursor.getLong(offset + 2) // mealId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MealItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem(cursor.getString(offset + 1));
        entity.setMealId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MealItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MealItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of Meal. */
    public List<MealItem> _queryMeal_Items(long mealId) {
        synchronized (this) {
            if (meal_ItemsQuery == null) {
                QueryBuilder<MealItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MealId.eq(null));
                queryBuilder.orderRaw("T.'_id' DESC");
                meal_ItemsQuery = queryBuilder.build();
            }
        }
        Query<MealItem> query = meal_ItemsQuery.forCurrentThread();
        query.setParameter(0, mealId);
        return query.list();
    }

}
